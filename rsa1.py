import gmpy
from gmpy2 import isqrt
from Crypto.Util.number import *

N = 11083448203765942400532643172963284556344030831183093091846689842885625727040285325988710966500250639008296934282234240996983923193575751320121972445301250634635922637116858936410808956813610334027374052404496582517294968866858981265988725946539437823884358845633642160262674501705926663101798408730492213021287924737809368058139885845521037709419827640245419280895415276910435926324551970059985173423013564452627688742149948784284782001089350593700427083048598533343600365331893304653100433386535932749912881639196001195037382033502597529708526994471226674586281488555960978772090936742900958027375368498215394581252385037406416965052830559263008212552326596911396688380771750619516578313373398933003976224004746490549511480662347454966206501689329851838938138688288610887092526093608296301846915344062723860027002250907211241462596243607220984550282837948206115523571487310875887807526053485103948714345037858161594696253804056666364776099030120854515192153139307953671321002784667246145348544519179390094166042447202431571860844927297168071617172098182778269050759079215658263054419147465195616251668030986209717441177296687694388689191135250936996963556768668092678601818011402949670383192723365678457411609893749723589719692224
# c = open("ciphertext_rsa.txt", "rb").read()
e = 5
c = 805354919578674492707633177891704018257163257116088490707850440207599375589425432446290468295321815419438256468948862216900199331335718984701498162228765792969665123597118762460393709222285000637682256894444268612602192451561474153269456363630995321587548386970903054178762835589317928572028631871946621669731117104669341961716611298032895928168474287200939621476265273178765117422566075101334971384177742959716031183916969086986635872400243391776934148635171043552133466257521897159594365633455501232816294118223790796710270899675474742105361550724749

# c = c.encode("hex")
# c = int(c, 16)

for k in range(1, 100000):
	q = isqrt(k * N / e)        
	for q in range(q-100, q+100):
		if N % q == 0:
			print ("[+] Found q: ", q)
			print ("[+] Calculated p: ", N / q)
			print ("[+] Calculated phi: ", ((N / q) - 1) * (q - 1))
			print ("[+] Calculated d: ", gmpy.invert(e, ((N / q) - 1) * (q - 1)))
			print ("[+] Decrypted flag.encrypted and Found the message m: ", pow(c, gmpy.invert(e, ((N / q) - 1) * (q - 1)), N))
			m = pow(c, gmpy.invert(e, ((N / q) - 1) * (q - 1)), N)
			print ("[+] FLAG is: ", long_to_bytes(m))
			break

# def binarySearch (arr, l, r, x): 
  
#     # Check base case 
#     if r >= l: 
  
#         mid = l + (r - l)/2
  
#         # If element is present at the middle itself 
#         if arr[mid] == x: 
#             return mid 
          
#         # If element is smaller than mid, then it can only 
#         # be present in left subarray 
#         elif arr[mid] > x: 
#             return binarySearch(arr, l, mid-1, x) 
  
#         # Else the element can only be present in right subarray 
#         else: 
#             return binarySearch(arr, mid+1, r, x) 
  
#     else: 
#         # Element is not present in the array 
#         return -1
  
# # Test array 
# arr = [ 2, 3, 4, 10, 40 ] 
# x = 10
  
# # Function call 
# result = binarySearch(arr, 0, c, x) 
# print(result)