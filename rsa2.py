import gmpy2
   
   
class RSAModuli:
       def __init__(self):
           self.a = 0
           self.b = 0
           self.m = 0
           self.i = 0
       def gcd(self, num1, num2):
           """
           This function os used to find the GCD of 2 numbers.
           :param num1:
           :param num2:
           :return:
           """
           if num1 < num2:
               num1, num2 = num2, num1
           while num2 != 0:
               num1, num2 = num2, num1 % num2
           return num1
       def extended_euclidean(self, e1, e2):
           """
           The value a is the modular multiplicative inverse of e1 and e2.
           b is calculated from the eqn: (e1*a) + (e2*b) = gcd(e1, e2)
           :param e1: exponent 1
           :param e2: exponent 2
           """
           self.a = gmpy2.invert(e1, e2)
           self.b = (float(self.gcd(e1, e2)-(self.a*e1)))/float(e2)
       def modular_inverse(self, c1, c2, N):
           """
           i is the modular multiplicative inverse of c2 and N.
           i^-b is equal to c2^b. So if the value of b is -ve, we
           have to find out i and then do i^-b.
           Final plain text is given by m = (c1^a) * (i^-b) %N
           :param c1: cipher text 1
           :param c2: cipher text 2
           :param N: Modulus
           """
           i = gmpy2.invert(c2, N)
           mx = pow(c1, self.a, N)
           my = pow(i, int(-self.b), N)
           self.m= mx * my % N
       def print_value(self):
           print("Plain Text: ", hex(self.m))
           plain = hex(self.m)[2: ]
           #str(plain).decode('hex')
          # ''.join(chr(int(i, 16)) for i in plain.split())
           print (bytes.fromhex(plain).decode('utf-8'))
           
   

def main():
       c = RSAModuli()
       N  = 153476996434154541285922349818582294382714694835510447431011437761528163621495434318072547119936307992867009922278689387200407186343070083331497189911408613124142799508549488392293754247882077377652784110898488758200503160756119943771293685335356228940743574855656922452510064204946700858740696386357922657313618954966416297541328341730369685860330866495397463184220660820087165229896232155167008638925162226279648490330608333689726714834342050462116301490711257657424161399633094928641426974365010080993092914024067798901832422599433812530949044083718165825115845386503559956514491485607935295467309332424884467810817162435494556456777546167282678892526951615220920277017501438541739120980171094508709499052432526989157994580034820214358004632942843945884073190730803981431716713505329503404053856183822842423093477517082948674983707259585078194299165579885529235743431895176835956076638484041099342950036989309888158975981564476553547394743878348983660040457726963362473740734867321825689635601087253993618533276194285115021707647424315019201560243282621817944446513239006035051017864827183761950532184259821787875222604494619955936114782300501306247695698369370853335668953850589268600931046954749397825468332394558005561945190681
       c1 = 132049892990875114643818281284931460131974908723525404336980269261299527387023386404498608921154033018833913201831227502702200746880175675496490505794671420234855502444882417979127896758748479026561515436231833130290409459645375106418771936144508001197852310013455190061063603746525969310324396312062457679108374965774402709160296702039714188259462078536961265012375475915062878272618425304524869111228300961327685936967340162691597540332812690075429238479095996905819057176523592325608950063376577633209193933462637371858181952936330271569119412320277749109847540396047204778301913191310194343559929345890230283546174856865680004515701331516726106292534341918675533497282754714257782037777115223265109465838120930972765992582783648381139246553638923939541954111093186533843103216018625227878272659369930754205435503918590283127194549790322727028397057697903871975649990034763171846571272878959439426103905019795081600058895862875420747543513044074079715946935635763207663905224732443835708133369771969101603174019338694450032197271848036859876431017338740886417715923893257299045273299919808029340914691349328655919503421088085630209263267857086365847117612462800671451510911373526444443232699601711275133785016540686303582562650846
       c2 = 121260853888579344397005194111975606468302679088268509545308779057564685068608271467568409291519403539685114430166156013773463935227483104232780158956307955710706117013532290443430531389999174891208808441019511641567225234168678963427819065788518721387850358445142393753408577641213768630227867562330030723492344527364178739455060178748359219336321101889678739273268337776151601274820132957758221712517633759305150695125398028103422236550105860332872795320695813400258663021763618275044285415706940078670672693053804729493772970344072682496789977402681349498888455838295497923077383144893220535845393348199701366321757036567372265922590247849763583462447089432542860386610366791472648721931961208693773716696964548416676072911461212308076598847922612999201610641021208115986989614193290897039181144908546730862586412448400582539894161654181975109136292928013156542554879537391444167583506651161730134185792255722138516252881464866681408850818525125905706505424523865920709293528990160580195968850102373398514926907625910711462174289780857414657819722109150315568444944343545975723675521227847646605692027330849106206974652090583265782145305686170028864851060078189361839346789488102410396694679423279712490023932801641859073220879159
       e1 = 257
       e2 = 65537
       c.extended_euclidean(e1, e2)
       c.modular_inverse(c1, c2, N)
       c.print_value()

if __name__ == '__main__':
       main()